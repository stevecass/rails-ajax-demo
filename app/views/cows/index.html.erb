<h1>Listing cows</h1>

<table id="cow_list">
  <thead>
    <tr>
      <th>Name</th>
      <th>Age</th>
      <th>Breed</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @cows.each do |cow| %>
    <%= render 'cow', cow: cow %>
    <% end %>
  </tbody>
</table>

<br>

<h2>Add a new cow</h2>
<%= render 'form' %>

<div id="feedback_messages">
</div>

<script>
$(document).ready(function(){

  $(document).on('ajax:success', function(event, data){
    //log target explicitly so we can see it easily
    console.log(event.target);
    console.log(event.target.tagName);
    console.log(event.target.className);
    console.log(event);
    console.log(data);
    /* 
    Here you could examine event.target to see which 
    link / button / form was originator of the ajax call
    Rails generates a form around button_to which 
    complicates things slightly
    */

    if(event.target.className == 'age_cow') {
      // find the cow and replace the content of the age field
      // data is json in this case (because that's how we set up the age method in cows controller)
      var newAge = data.age;
      var cowId = data.id;
      var selector = 'tr#cow_' + cowId + ' td.age';
      $(selector).html(newAge);
    }

    if(event.target.className == 'new_cow') {
      // cows#new returns an html snippet so we'll append it to the cows table
      $('table#cow_list').append(data);
    }

    if(event.target.tagName == 'FORM' && event.target.className == 'button_to') {
      // When we mark a button_to as remote: true, rails generates a form to surround our 
      // button_to. The event target is the form not the button. Because it's generated, it's 
      // a bit more challenging to grab it (our id and class are on the button not on the surrounding 
      //  form that rails generated.

      // BUT we could do a few things here.
      // 1. We can check the data from the controller. Our destroy method returns json like {deleted: 17} 
      // 2. We can check the action of the form that raised the event
      // 3. We can use the event data to build a jquery selector to grab the form and look inside it at its inputs
      
      // We'll do something convoluted here to check in both ways 1 and 2 just for demo purposes.
      // to get the cow id then remove the row from the table

      var formAction = event.target.action;
      var formCowId = formAction.match(/\d+$/)[0];

      var dataCowId = data.deleted;
      if (dataCowId != formCowId) {
        throw "The cow id in the form action and the cow Id in the return data don't match. Headscratcher."
      }

      var selector = 'tr#cow_' + cowId;
      $(selector).remove();

    }

  })
});

</script>